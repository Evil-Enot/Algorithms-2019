@file:Suppress("UNUSED_PARAMETER")

package lesson6

/**
 * Наибольшая общая подпоследовательность.
 * Средняя
 *
 * Дано две строки, например "nematode knowledge" и "empty bottle".
 * Найти их самую длинную общую подпоследовательность -- в примере это "emt ole".
 * Подпоследовательность отличается от подстроки тем, что её символы не обязаны идти подряд
 * (но по-прежнему должны быть расположены в исходной строке в том же порядке).
 * Если общей подпоследовательности нет, вернуть пустую строку.
 * Если есть несколько самых длинных общих подпоследовательностей, вернуть любую из них.
 * При сравнении подстрок, регистр символов *имеет* значение.
 *
 *
 * Трудоемкость: О(m + n)
 * Ресурсоемкость: O(m + n)
 * где m - длина первой строки и n - длина второй строки
 */
fun longestCommonSubSequence(first: String, second: String): String {
    var result = ""
    val max = Array(first.length + 1) { IntArray(second.length + 1) }
    var f = first.length
    var s = second.length

    for (i in 1 until max.size) {
        for (j in 1 until max[i].size) {
            if (first[i - 1] == second[j - 1]) max[i][j] = 1 + max[i - 1][j - 1]
            else max[i][j] = max[i - 1][j].coerceAtLeast(max[i][j - 1])
        }
    }

    while (f > 0 && s > 0) when {
        first[f - 1] == second[s - 1] -> {
            result = first[f - 1] + result
            f--
            s--
        }
        max[f][s] == max[f - 1][s] -> f--
        else -> s--
    }

    return result
}

/**
 * Наибольшая возрастающая подпоследовательность
 * Сложная
 *
 * Дан список целых чисел, например, [2 8 5 9 12 6].
 * Найти в нём самую длинную возрастающую подпоследовательность.
 * Элементы подпоследовательности не обязаны идти подряд,
 * но должны быть расположены в исходном списке в том же порядке.
 * Если самых длинных возрастающих подпоследовательностей несколько (как в примере),
 * то вернуть ту, в которой числа расположены раньше (приоритет имеют первые числа).
 * В примере ответами являются 2, 8, 9, 12 или 2, 5, 9, 12 -- выбираем первую из них.
 *
 * Трудоемкость: O(n ^ n)
 * Ресурсоемкость: O(n)
 */
fun longestIncreasingSubSequence(list: List<Int>): List<Int> {
    val result = mutableListOf<Int>()
    if (list.isEmpty()) return result

    var leng = 0
    var pos = 0

    val index = IntArray(list.size) { -1 }
    val length = IntArray(list.size)

    for (i in list.indices) {
        for (j in 0 until i) {
            if (list[i] > list[j] && length[i] < length[j] + 1) {
                index[i] = j
                length[i] = length[j] + 1
            }
        }
    }

    for (i in length.indices) {
        if (length[i] > leng) {
            leng = length[i]
            pos = i
        }
    }

    while (pos != -1) {
        result.add(0, list[pos])
        pos = index[pos]
    }

    return result
}

/**
 * Самый короткий маршрут на прямоугольном поле.
 * Средняя
 *
 * В файле с именем inputName задано прямоугольное поле:
 *
 * 0 2 3 2 4 1
 * 1 5 3 4 6 2
 * 2 6 2 5 1 3
 * 1 4 3 2 6 2
 * 4 2 3 1 5 0
 *
 * Можно совершать шаги длиной в одну клетку вправо, вниз или по диагонали вправо-вниз.
 * В каждой клетке записано некоторое натуральное число или нуль.
 * Необходимо попасть из верхней левой клетки в правую нижнюю.
 * Вес маршрута вычисляется как сумма чисел со всех посещенных клеток.
 * Необходимо найти маршрут с минимальным весом и вернуть этот минимальный вес.
 *
 * Здесь ответ 2 + 3 + 4 + 1 + 2 = 12
 */
fun shortestPathOnField(inputName: String): Int {
    TODO()
}

// Задачу "Максимальное независимое множество вершин в графе без циклов"
// смотрите в уроке 5